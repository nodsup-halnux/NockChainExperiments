There arent any serious commments for inner, outer and miner. Here is a rundown of how
inner.hoon works:

:: I. System Structure ::
:: inner.hoon is the core stateful logic of the dumbnet blockchain kernel. It 
:: orchestrates the receipt, validation, and storage of blocks and transactions, 
:: including genesis block handling, block propagation, 
:: consensus tracking, and transaction gossip. 

:: II. Key Modules Referenced ::
:: - dk: Kernel state and effects
:: - mine: Proof-of-work and mining logic
:: - nv: Nock proof verifier
:: - c-transact (aliased as t): Transaction processing
:: - dumb-*: Submodules managing miner state, pending blocks, consensus, derived data ::

:: III. Core Functions ::
:: - peek: Scry interface providing read access to various kernel substate, e.g., blocks, transactions, balance, mining keys, heaviest chain metadata. ::
:: - poke: Entry point for external effects (wires). It routes input to handle-command or handle-fact based on context, updating state or producing effect:dk. ::
:: - heard-block, heard-tx: Process inbound blocks or transactions; validate PoW, structure, and transactions; update consensus and derived state; broadcast if valid. ::
:: - process-block-with-txs: Validate block transactions and trigger consensus updates or discard. ::
:: - new-block: Main path for adding validated blocks to state, triggering peer requests and gossip. ::
:: - handle-command: Implements kernel commands (e.g., %genesis, %pow, %set-mining-key) enforcing appropriate context checks. ::
:: - handle-fact: Handles gossip facts during normal operations. ::

:: IV. Specialized Behavior ::
:: - Genesis handling: Blocks without parent must validate against hardcoded genesis seal and metadata.
:: - PoW checks: Enforces mining correctness and detects fraudulent submissions.
:: - Elders protocol: Requests ancestors when missing parent blocks; key for reorg handling.
:: - Mining control: Responds to mining status, pubkey settings, and nonce iteration. ::
